#!/usr/bin/env bash

plugin::location() {
    (cd $(dirname $([ -L "${BASH_SOURCE}" ] && readlink "${BASH_SOURCE}" || echo "${BASH_SOURCE}")) && pwd)
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    if [ "$1" == "init" ]; then
        ln -s -f "$(plugin::location)/plugin" "$(plugin::location)/bin/plugin"
        if [[ ":${PATH}:" != *":$(plugin::location)/bin:"* ]]; then
            PATH="$(plugin::location)/bin${PATH:+":${PATH}"}"
        fi
    else
        echo "Do not source plugin unless you are calling init."
        return 1
    fi
    return 0
fi

plugin::install() {
    local bundle_dir="$(plugin::location)/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi

    local repo="$1"
    if [[ "${repo}" != */* ]]; then
        echo "${repo} is not a valid repo <user>/<repo>"
        return 1
    fi
    local git_repo="https://github.com/${repo}"
    local plugin_name=${repo##*/}
    local install_dir="${bundle_dir}/${plugin_name}"
    if [ -d "${install_dir}" ]; then
        echo "${plugin_name}" already installed
        return 1
    fi
    mkdir -p "${install_dir}"
    if ! git clone -q "${git_repo}" "${install_dir}"; then
        echo "error cloning the git repo ${git_repo}"
        return 1
    fi

    plugin::_link "${plugin_name}"
}

plugin::_link() {
    local plugin_location="$(plugin::location)"
    local bundle_dir="${plugin_location}/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi

    local plugin_name="$1"
    if [ -z "${plugin_name}" ]; then
        echo "specify a plugin to link"
        return 1
    fi

    local plugin_dir="${bundle_dir}/${plugin_name}"
    if [ ! -d "${plugin_dir}" ]; then
        echo "${plugin_name} is not an installed plugin"
        return 1
    fi

    local search_dir="${plugin_dir}"
    if [ -d "${plugin_dir}/bin" ]; then
        search_dir="${plugin_dir}/bin"
    fi

    local bin;
    local bin_dir="${plugin_location}/bin"
    if [ ! -d "${bin_dir}" ]; then
        echo "bin directory does not exist: ${bin_dir}"
        return 1
    fi
    find -L "${search_dir}" -mindepth 1 -maxdepth 1 -perm -u+x -type f -or -type l -follow | while read bin; do
        local bin_name=${bin##*/}
        local bin_location="${bin_dir}/${bin_name}"
        if [ -f "${bin_location}" ]; then
            echo "a binary named ${bin_name} is already linked."
            return 1
        fi
        ln -s "${bin}" "${bin_location}"

        for SUFFIX in ${PLUGIN_REMOVE_SUFFIX//:/ }; do
            if [[ $bin_name == *"$SUFFIX" ]]; then
                local short_name=${bin_name%"$SUFFIX"}
                local short_location="${bin_dir}/${short_name}"
                if [ -f "${short_location}" ]; then
                    echo "a binary named ${short_name} is already linked."
                    return 1
                fi
                ln -s "${bin}" "${short_location}"
            fi
        done

    done
}

plugin::link() {
    local bundle_dir="$(plugin::location)/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi

    local path="$1"
    if [ -z "${path}" ] || [ ! -d "${path}" ]; then
        echo "${path} is not a directory"
        return 1
    fi
    local absolute_path="$(cd "$(dirname "${path}")" && pwd)/$(basename "${path}")"
    if [ ! -d "${absolute_path}" ]; then
        echo "${absolute_path} is not a directory"
        return 1
    fi

    local plugin_name="$2"
    if [ -z "${plugin_name}" ]; then
        echo "Not a valid plugin name: ${plugin_name}"
        return 1
    fi
    local install_dir="${bundle_dir}/${plugin_name}"
    if [ -d "${install_dir}" ]; then
        echo "${plugin_name}" already installed
        return 1
    fi

    if ! ln -s "${absolute_path}" "${install_dir}"; then
        echo "error linking ${absolute_path} to ${install_dir}"
        return 1
    fi

    plugin::_link "${plugin_name}"
}

plugin::list() {
    local plugin_location="$(plugin::location)"
    local bundle_dir="${plugin_location}/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi
    cd "${bundle_dir}" && find -L . -maxdepth 1 -mindepth 1 -type d | sed 's:^\./::'
}

plugin::_refresh() {
    local plugin_location="$(plugin::location)"
    local bundle_dir="${plugin_location}/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi
    local bin_dir="${plugin_location}/bin"
    if [ ! -d "${bin_dir}" ]; then
        echo "bin directory does not exist: ${bin_dir}"
        return 1
    fi

    (cd "${bin_dir}" && rm -rf *)
    ln -s -f "${plugin_location}/plugin" "${plugin_location}/bin/plugin"

    local plugin_name
    plugin::list | while read plugin_name; do
        plugin::_link "${plugin_name}"
    done
}

plugin::refresh() {
    plugin::_refresh
}

plugin::_upgrade() {
    local plugin_location="$(plugin::location)"
    local bundle_dir="${plugin_location}/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi

    plugin_name="$1"
    if [ -z "$1" ]; then
        echo "specify a plugin to upgrade"
        return 1
    fi
    if [[ "${plugin_name}" == .* ]]; then
        echo "plugins do not start with a dot!"
        return 1
    fi
    local plugin_dir="${bundle_dir}/${plugin_name}"
    if [ ! -d "${plugin_dir}" ]; then
        echo "${plugin_name} is not installed"
        return 1
    fi

    (cd "${plugin_dir}" && git pull -q)
}

plugin::upgrade() {
    local failed=""
    local plugin_name;
    if [ "$#" -eq 0 ]; then
        plugin::list | while read plugin_name; do
            if ! plugin::_upgrade "${plugin_name}"; then
                failed="${failed} ${plugin_name}"
            fi
        done
    else
        for plugin_name in "$@"; do
            if ! plugin::_upgrade "${plugin_name}"; then
                failed="${failed} ${plugin_name}"
            fi
        done
    fi
    plugin::_refresh
    [ -z "${failed}" ] && return 0
    echo
    echo "failed to upgrade:${failed}"
    return 1
}

plugin::uninstall() {
    local plugin_location="$(plugin::location)"
    local bundle_dir="${plugin_location}/bundle"
    if [ ! -d "${bundle_dir}" ]; then
        echo "bundle directory does not exist: ${bundle_dir}"
        return 1
    fi

    plugin_name="$1"
    if [ -z "$1" ]; then
        echo "specify a plugin to uninstall"
        return 1
    fi
    if [[ "${plugin_name}" == .* ]]; then
        echo "plugins do not start with a dot!"
        return 1
    fi
    local plugin_dir="${bundle_dir}/${plugin_name}"
    if [ ! -d "${plugin_dir}" ]; then
        echo "${plugin_name} is not installed"
        return 1
    fi

    (cd "${bundle_dir}" && rm -rf "${plugin_name}")
    plugin::_refresh
}

plugin::help() {
    echo "install <user>/<plugin>"
    echo "list"
    echo "uninstall <plugin>"
    echo "upgrade [<plugin>...]"
    echo "link <local dir> <plugin>"
    echo "refresh"
    echo "help"
    return 1
}

plugin::parse() {
    local command="$1"
    shift
    case "${command}" in
        install) plugin::install "$@"
            ;;
        list) plugin::list "$@"
            ;;
        upgrade) plugin::upgrade "$@"
            ;;
        uninstall) plugin::uninstall "$@"
            ;;
        link) plugin::link "$@"
            ;;
        refresh) plugin::refresh "$@"
            ;;
        *) plugin::help
            ;;
    esac
}

plugin::parse "$@"
